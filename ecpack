#!/bin/bash 

xpl_path=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

opt_mirror="localhost"
opt_repo=testing
opt_ppa=test
opt_config=CPackConfig.cmake
opt_verbose=0
opt_package_name=""
opt_package_version=""
opt_package_dir=""
opt_package_vendor=""
opt_package_maintainer=""
opt_package_depends=""
opt_package_dev_depends=""
opt_package_control_extra=""
opt_package_description=""
opt_help=0
opt_version=0
opt_debug=0
opt_split=1

cmake_opts=""

if [ $opt_debug -eq 1 ]
then
	export PATH=${xpl_path}/scripts:$PATH
	scripts_path=${xpl_path}/scripts
else
	scripts_path=/usr/local/share/cmake-tools
fi

function usage()
{
	echo "Usage" >&2
	echo >&2
  	echo "$0 [options]" >&2
  	echo >&2
	echo "$0 comes in replacement for cpack to build debian packages, see below" >&2
	echo >&2

    echo "Targets:"
    echo "  package                             = Create package using selected generator" >&2
    echo "  publish                             = Publish package to repository" >&2
	echo >&2

	echo "Package options:"
	echo "  --mirror=url                        = Mirror repository url (default ${opt_mirror})" >&2
	echo "  --repo=name                         = Repository to publish package (default ${opt_repo})" >&2
	echo "  --ppa=name                          = Name of the debian ppa to connect with public key on server (default $opt_ppa)" >&2
  	echo "  --config=<config file>              = Specify the config file (default ${opt_config})" >&2
	echo "  --split=<on|off>                    = Split debian package into dev and retail version" >&2
	echo "  --verbose                           = Enable verbose output" >&2
	echo "  --generator=<name>                  = Override/define CPACK_GENERATOR" >&2
	echo "  --package-name=<name>               = Override/define CPACK_PACKAGE_NAME" >&2
	echo "  --package-version=<version>         = Override/define CPACK_PACKAGE_VERSION" >&2
	echo "  --package-dir=<directory>           = Override/define CPACK_PACKAGE_DIRECTORY" >&2
	echo "  --package-vendor=<name>             = Override/define CPACK_PACKAGE_VENDOR" >&2
	echo "  --package-dockerfile=<file>         = Override/define CPACK_DOCKER_DOCKERFILE" >&2
	echo "  --package-maintainer=<mail>         = Override/define CPACK_DEBIAN_PACKAGE_MAINTAINER" >&2
	echo "  --package-depends=<packages>        = Override/define CPACK_DEBIAN_PACKAGE_DEPENDS" >&2
	echo "  --package-dev-depends=<packages>    = Override/define CPACK_DEBIAN_PACKAGE_DEV_DEPENDS" >&2
	echo "  --package-control-extra=<scripts>   = Override/define CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA" >&2
	echo "  --package-description=<value>       = Override/define CPACK_PACKAGE_DESCRIPTION_SUMMARY" >&2
	echo "  --help                              = Print usage information and exit" >&2
	echo "  --version                           = Print version number and exit" >&2
	echo >&2

    echo "Generators:"
    echo "  DEB                                 = Debian package using checkinstall" >&2
    echo "  DOCKER                              = Docker package" >&2
	echo >&2

	exit 0
}

function version() {
	#TODO
	echo "ecpack version 1.0.0"
	echo
	echo "cmake-tools suite maintained and supported by Sebastien Besombes."
	exit 0
}

function vecho() {
	if [ $opt_verbose -eq 1 ]
	then
		echo $*
	fi
}

function read_config() {
	if [ ! -f ${opt_config} ]
	then
		echo "Error CPack configuration file not found (${opt_config})" >&2
		exit 1
	fi

	if [ "_$opt_generator" == "_" ]
	then
		generator=$(grep -e '(CPACK_GENERATOR ' ${opt_config} | grep -v "#" | sed -e "s#.*CPACK_GENERATOR \"\(.*\)\")#\1#g")
	else
		name=$opt_package_generator
	fi
	vecho "generator: $generator"

	if [ "_$opt_package_name" == "_" ]
	then
		name=$(grep -e '(CPACK_PACKAGE_NAME ' ${opt_config} | grep -v "#" | sed -e "s#.*CPACK_PACKAGE_NAME \"\(.*\)\")#\1#g")
	else
		name=$opt_package_name
	fi
	vecho "name: $name"

	if [ "_$opt_package_version" == "_" ]
	then
		version=$(grep -e '(CPACK_PACKAGE_VERSION ' ${opt_config} | sed -e "s#.*CPACK_PACKAGE_VERSION \"\(.*\)\")#\1#g")
	else
		version=$opt_package_version
	fi
	vecho "version: $version"
}


cpack_opts=""

tgt_package=1
tgt_publish=0
opt_target=0
opt_help=0
while [[ "_$*" != "_" ]]
do
    if [ "_$(echo "$1" | grep '=')" != "_" ]
    then
        filt_arg="$(echo $1 | sed "s#\(.*\)=.*#\1#g")"
        value_arg="$(echo $1 | sed "s#.*=\(.*\)#\1#g")"
    else
        filt_arg=$1
        unset value_arg
    fi

	if [[ "$filt_arg" == "--mirror" ]]; then
	    opt_mirror=${value_arg}
	elif [[ "$filt_arg" == "--repo" ]]; then
	    opt_repo=${value_arg}
	elif [[ "$filt_arg" == "--ppa" ]]; then
	    opt_ppa=${value_arg}
	elif [[ "$filt_arg" == "--config" ]]; then
	    opt_config="${value_arg}"
	elif [[ "$filt_arg" == "--verbose" ]]; then
	    opt_verbose=1
	elif [[ "$filt_arg" == "--generator" ]]; then
	    opt_generator="${value_arg}"
	elif [[ "$filt_arg" == "--split" ]]; then
	    if [ "_${value_arg}" == "_on" ]; then 
	    	opt_split=1
	    elif [ "_${value_arg}" == "_off" ]; then
	    	opt_split=0
	    else
			echo "ECPack Error: invalid parameter $1" >&2
			echo "Specify --help for usage." >&2
			exit 1
		fi	    
	elif [[ "$filt_arg" == "--package-name" ]]; then
	    opt_package_name="${value_arg}"
	elif [[ "$filt_arg" == "--package-version" ]]; then
	    opt_package_version="${value_arg}"
	elif [[ "$filt_arg" == "--package-dir" ]]; then
	    opt_package_dir="${value_arg}"
	elif [[ "$filt_arg" == "--package-vendor" ]]; then
	    opt_package_vendor="${value_arg}"
	elif [[ "$filt_arg" == "--package-dockerfile" ]]; then
	    opt_package_dockerfile="${value_arg}"
	elif [[ "$filt_arg" == "--package-maintainer" ]]; then
	    opt_package_maintainer="${value_arg}"
	elif [[ "$filt_arg" == "--package-depends" ]]; then
	    opt_package_depends="${value_arg}"
	elif [[ "$filt_arg" == "--package-control-extra" ]]; then
	    opt_package_control_extra="${value_arg}"
	elif [[ "$filt_arg" == "--package-decription" ]]; then
	    opt_package_description="${value_arg}"
	elif [[ "$filt_arg" == "--help" ]]; then
	    opt_help=1
	elif [[ "$filt_arg" == "--version" ]]; then
	    opt_version=1
	elif [[ "$filt_arg" == "package" ]]; then
	    tgt_package=1
	elif [[ "$filt_arg" == "publish" ]]; then
	    tgt_package=1
	    tgt_publish=1
	else
		echo "ECPack Error: invalid parameter $1" >&2
		echo "Specify --help for usage." >&2
		exit 1
	fi
	
	shift
done

[ $opt_help -eq 1 ] && usage
[ $opt_version -eq 1 ] && version

set -e
# preinstall
#echo "ECPack: preinstall"
#eval "cmake $cmake_opts --build . --target preinstall"
#eval "cmake $cmake_opts --build ${make_path} --target \"preinstall\""

echo "ECPack: checking config"
read_config

if [ "_$generator" == "_DEB" ]
then
	source ${scripts_path}/ecpack/ecpack-debian
elif [ "_$generator" == "_DOCKER" ]
then
	source ${scripts_path}/ecpack/ecpack-docker
else
	echo "ECPack Error: Cannot initialize ECPack generator: $generator" >&2
	exit 1
fi

read_generator_config

[ $tgt_package -eq 1 ] && package
[ $tgt_publish -eq 1 ] && publish

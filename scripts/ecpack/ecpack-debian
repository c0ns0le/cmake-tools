function read_generator_config() {
	release=$(package-next-release $opt_mirror $opt_ppa $opt_repo $name $version)
	vecho "release: $release"
	
	if [ "_$opt_package_vendor" == "_" ]
	then
		vendor=$(grep -e '(CPACK_PACKAGE_VENDOR ' ${opt_config} | sed -e "s#.*CPACK_PACKAGE_VENDOR \"\(.*\)\")#\1#g")
	else
		vendor=$opt_package_vendor
	fi
	vecho "vendor: $vendor"
	
	if [ "_$opt_package_dockerfile" == "_" ]
	then
		dockerfile=$(grep -e '(CPACK_PACKAGE_DOCKER_DOCKERFILE ' ${opt_config} | sed -e "s#.*CPACK_PACKAGE_DOCKER_DOCKERFILE \"\(.*\)\")#\1#g")
	else
		dockerfile=$opt_package_dockerfile
	fi
	[ "_$dockerfile" != "_" ] && vecho "dockerfile: $dockerfile"

	if [ "_$opt_package_maintainer" == "_" ]
	then
		maintainer=$(grep -e '(CPACK_DEBIAN_PACKAGE_MAINTAINER ' ${opt_config} | sed -e "s#.*CPACK_DEBIAN_PACKAGE_MAINTAINER \"\(.*\)\")#\1#g")
	else
		maintainer=$opt_package_maintainer
	fi
	vecho "maintainer: $maintainer"

	if [ "_$opt_package_depends" == "_" ]
	then
		depends=$(grep -e '(CPACK_DEBIAN_PACKAGE_DEPENDS ' ${opt_config} | sed -e "s#.*CPACK_DEBIAN_PACKAGE_DEPENDS \"\(.*\)\")#\1#g")
	else
		depends=$opt_package_depends
	fi
	vecho "depends: $depends"

	if [ "_$opt_package_dev_depends" == "_" ]
	then
		dev_depends=$(grep -e '(CPACK_DEBIAN_PACKAGE_DEV_DEPENDS ' ${opt_config} | sed -e "s#.*CPACK_DEBIAN_PACKAGE_DEV_DEPENDS \"\(.*\)\")#\1#g")
	else
		dev_depends=$opt_package_dev_depends
	fi
	vecho "dev_depends: $dev_depends"

	if [ "_$opt_package_control_extra" == "_" ]
	then
		control_extra=$(grep -e '(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA ' ${opt_config} | sed -e "s#.*CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"\(.*\)\")#\1#g")
	else
		control_extra=$opt_package_control_extra
	fi
	vecho "control_extra: $control_extra"

	if [ "_$opt_package_description" == "_" ]
	then
		description=$(grep -e '(CPACK_PACKAGE_DESCRIPTION_SUMMARY ' ${opt_config} | sed -e "s#.*CPACK_PACKAGE_DESCRIPTION_SUMMARY \"\(.*\)\")#\1#g")
	else
		description=$opt_package_description
	fi
	vecho "description: $description"
	
	return 0 
}

function package() {
	echo "CPack: package $name-$version-$release"
	
	output=$(mktemp -d)
	vecho "ECPack: temporary build dir in ${output}"

	if [ $opt_split -eq 0 ]
	then
		pkgname=$name
		DESTDIR=${output} cmake $cmake_opts --build . --target install
		
		# create control file
		mkdir -p ${output}/DEBIAN
		chmod 0755 ${output}/DEBIAN
		echo "Package: $name" > ${output}/DEBIAN/control
		echo "Priority: extra" >> ${output}/DEBIAN/control
		echo "Section: Development" >> ${output}/DEBIAN/control
		echo "Maintainer: $maintainer" >> ${output}/DEBIAN/control
		echo "Architecture: amd64" >> ${output}/DEBIAN/control
		echo "Depends: ${depends}" >> ${output}/DEBIAN/control
		echo "Version: ${version}-${release}" >> ${output}/DEBIAN/control
		echo "Provides: $name" >> ${output}/DEBIAN/control
		echo "Description: $description" >> ${output}/DEBIAN/control
		
		if [ "_${control_extra}" != "_" ]
		then
			echo ${control_extra} | sed "s#;# #g" | xargs cp -t ${output}/DEBIAN
			find ${output}/DEBIAN | xargs chmod 0755 
		fi
		
		dpkg -b ${output} ${pkgname}_${version}-${release}_amd64.deb
	else
		mkdir -p ${output}/${name}-dev
		mkdir -p ${output}/${name}
	
		output_dev=${output}/${name}-dev
		output_retail=${output}/${name}
		
		if [ "_$dev_depends" == "_" ]
		then
			echo "ECPack: no dev dependencies given, no specialization for dev package"
			dev_depends=$depends
		fi
		
		# install files in retail package
		DESTDIR=${output_retail} cmake $cmake_opts --build . --target install

		## create retail package
		mkdir -p ${output_retail}/DEBIAN
		chmod 0755 ${output_retail}/DEBIAN
		
		# create control file
		echo "Package: ${name}" > ${output_retail}/DEBIAN/control
		echo "Priority: extra" >> ${output_retail}/DEBIAN/control
		echo "Section: Development" >> ${output_retail}/DEBIAN/control
		echo "Maintainer: $maintainer" >> ${output_retail}/DEBIAN/control
		echo "Architecture: amd64" >> ${output_retail}/DEBIAN/control
		echo "Depends: ${depends}" >> ${output_retail}/DEBIAN/control
		echo "Version: ${version}-${release}" >> ${output_retail}/DEBIAN/control
		echo "Provides: $name" >> ${output_retail}/DEBIAN/control
		echo "Description: $description" >> ${output_retail}/DEBIAN/control
		
		if [ "_${control_extra}" != "_" ]
		then
			echo ${control_extra} | sed "s#;# #g" | xargs cp -t ${output_retail}/DEBIAN
			find ${output_retail}/DEBIAN | xargs chmod 0755 
		fi
		
		# mode include files
		if [ -d ${output_retail}/usr/local/include ]
		then
			mkdir -p ${output_dev}/usr/local
			mv ${output_retail}/usr/local/include ${output_dev}/usr/local
		fi
		
		# package
		dpkg -b ${output_retail} ${name}_${version}-${release}_amd64.deb
		
#		for file in $(find ${output_retail} -name "*.h*" -o -name "*.a")
#		do
#			relfile=$(echo $file | sed "s#${output_retail}/##g")
#			path=$(dirname $relfile)
#			name=$(basename $relfile)
			
#			mkdir -p ${output_retail}/${path}
#			mv ${file} ${output_retail}/${path}/
			
			# remove empty directory hierarchy
#			while [ "_$(ls -1 ${path}/)" == "_" ]
#			do
#				rmdir ${path}
#				path=${path}/..
#			done
#		done
		
		
		## create dev package
		
		# create control file
		mkdir -p ${output_dev}/DEBIAN
		chmod 0755 ${output_dev}/DEBIAN
		echo "Package: ${name}-dev" > ${output_dev}/DEBIAN/control
		echo "Priority: extra" >> ${output_dev}/DEBIAN/control
		echo "Section: Development" >> ${output_dev}/DEBIAN/control
		echo "Maintainer: $maintainer" >> ${output_dev}/DEBIAN/control
		echo "Architecture: amd64" >> ${output_dev}/DEBIAN/control
		echo "Depends: $dev_depends, $name" >> ${output_dev}/DEBIAN/control
		echo "Version: ${version}-${release}" >> ${output_dev}/DEBIAN/control
		echo "Provides: $name" >> ${output_dev}/DEBIAN/control
		echo "Description: $description" >> ${output_dev}/DEBIAN/control
		
		# package
		dpkg -b ${output_dev} ${name}-dev_${version}-${release}_amd64.deb
	fi	
	
	# cleanup
	if [ $opt_debug -eq 0 ]
	then
		rm -rf ${output}
	fi
	
	return 0
}

function publish() {
	echo "CPack: publish $name-$version-$release"
	
	${scripts_path}/package-add $opt_mirror $opt_ppa $opt_repo ${name}_${version}-${release}_amd64.deb
	
	if [ $opt_split -eq 1 ]
	then
		${scripts_path}/package-add $opt_mirror $opt_ppa $opt_repo ${name}-dev_${version}-${release}_amd64.deb
	fi
	
	return 0
}


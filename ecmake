#!/bin/bash 

xpl_path=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

opt_gold=1
opt_ccache=1
opt_ninja=1

function compiler_versions() {
	compiler=$1
	
	version=$(
		IFS=':'
		for i in $PATH
		do 
			test -d "$i" && find "$i" -maxdepth 1 -executable -name "${compiler}-*" -exec basename {} \; | grep -e "^${compiler}-[0-9]"
		done | sort | uniq | sed "s#${compiler}-\(.*\)#\1#g"
	) 
	echo $version | sed "s# #, #g"
}

function usage()
{
	gcc_versions="$(compiler_versions gcc)"
	clang_versions="$(compiler_versions clang)"
	
	cmake --help 
	echo >&2
	
    echo "Additional targets:"
    echo "  distclean                    = Clean cmake generated files " 
    echo "  eclipse                      = Generate eclipse project" 
    echo >&2
    
	echo "Build options:"
	echo "  --debug                      = Build with debug informations (default)" >&2
	echo "  --release                    = Build for release" >&2
	if [ "_$gcc_versions" != "_" ]
	then
		echo "  --gcc=[version]              = Build with gcc (default), available versions: $gcc_versions" >&2
	else
		echo "  --gcc                        = Build with gcc (default)" >&2
	fi
	if [ "_$clang_versions" != "_" ]
	then
		echo "  --clang=[version]            = Build with clang, available versions: $clang_versions" >&2
	else
		echo "  --clang                      = Build with clang" >&2
	fi
	echo "  --gold                       = Use gold linker" >&2
	echo "  --ccache                     = Use ccache to speed up build" >&2
	echo "  --ninja                      = build with ninja" >&2
	echo "  --verbose                    = Enable verbose build" >&2
	exit 0
}

help=0

cmake_opts=""
opt_configure=0

function debug_on() {
	cmake_opts="$cmake_opts -DCMAKE_BUILD_TYPE=Debug"
}

function release_on() {
	cmake_opts="$cmake_opts -DCMAKE_BUILD_TYPE=Release"
}

function check_compiler() {
	compiler=$1
	version=$2
	
	if [ ! -f CMakeCache.txt ]
	then
		return 1
	fi
	
	name=$compiler
	if [ "_$version" != "_" ]
	then
		name="$name-$version"
	fi
	
	if [ "_$(grep -e '$name$' CMakeCache.txt)" == "_" ]
	then
		echo "Previous build was made with another compiler, remove CMakeFiles before launching or distclean target" >&2
		return 0
	fi
}

function use_gcc() {
	version=$1
		
	if [[ "_$(which gcc-${version})" == "_" ]]
	then
		echo "-- gcc-${version} not found !" >&2
		exit 1
	fi

	echo "-- Enabling gcc-$1"
	
	check_compiler gcc $version && exit 1
	cmake_opts="$cmake_opts -DECMAKE_COMPILER=gcc"
	if [ "_$version" != "_" ]
	then
		cmake_opts="$cmake_opts -DECMAKE_COMPILER_VERSION=${version}"
	fi
	opt_configure=1
}

function use_clang() {
	version=$1
	
	if [[ "_$(which clang-${version})" == "_" ]]
	then
		echo "-- gcc-${version} not found !" >&2
		exit 1
	fi

	echo "-- Enabling clang-$1"
	
	check_compiler clang $version && exit 1
	cmake_opts="$cmake_opts -DECMAKE_COMPILER=gcc"
	if [ "_$version" != "_" ]
	then
		cmake_opts="$cmake_opts -DECMAKE_COMPILER_VERSION=${version}"
	fi
	opt_configure=1
}

function use_gold() {
	if [[ "_$(which gold)" != "_" ]]
	then
		echo "-- Link with gold"
	
		cmake_opts="$cmake_opts -DECMAKE_LINKER_GOLD=1"
		opt_configure=1
	else
		echo "-- Linker gold not found" 
	fi
}

function use_ccache() {
	if [[ "_$(which ccache)" != "_" ]]
	then
		cmake_opts="$cmake_opts -DECMAKE_USE_CCACHE=1"
		opt_configure=1
	else
		echo "-- ccache not found"
	fi
}

function use_ninja() {
	if [[ "_$(which ninja)" != "_" ]]
	then
		cmake_opts="$cmake_opts -G \"Ninja\""
	else
		echo "-- ninja not found"
		exit 1
	fi
}

function tgt_distclean()
{
	echo "Cleaning cmake generated files"
	
	if [ -f Makefile ]
	then
		make clean
	fi
	
    eval "find . -depth -type d -name CMakeFiles -print -exec rm -rf {} \;"
    eval "find . -depth -type d -name _CPack_Packages -print -exec rm -rf {} \;"
    eval "find . -depth -type d -name Testing -print -exec rm -rf {} \;"
    eval "find . -depth -type f -name install_manifest.txt -print -exec rm -f {} \;"
    eval "find . -depth -type f -name Makefile -print -exec rm -f {} \;"
    eval "find . -depth -type f -name CMakeCache.txt -print -exec rm -f {} \;"
    eval "find . -depth -type f -name cmake_install.cmake -print -exec rm -f {} \;"
    eval "find . -depth -type f -name CTestConfig.cmake -print -exec rm -f {} \;"
    eval "find . -depth -type f -name CTestTestfile.cmake -print -exec rm -f {} \;"
    eval "find . -depth -type f -name DartConfiguration.tcl -print -exec rm -f {} \;"
    eval "find . -depth -type f -name CPackConfig.cmake -print -exec rm -f {} \;"
    eval "find . -depth -type f -name CPackSourceConfig.cmake -print -exec rm -f {} \;"
}

function tgt_eclipse()
{
    echo " Create Eclipse project"

    cmake_opts="-G \"Eclipse CDT4 - Unix Makefiles\" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_ARG1=\"-std=c++14\" $cmake_opts"
}

opt_verbose=0
opt_target=0
while [[ "_$*" != "_" ]]
do
    if [ "_$(echo "$1" | grep '=')" != "_" ]
    then
        filt_arg="$(echo $1 | sed "s#\(.*\)=.*#\1#g")"
        value_arg="$(echo $1 | sed "s#.*=\(.*\)#\1#g")"
    else
        filt_arg=$1
        unset value_arg
    fi

	if [[ "$filt_arg" == "--help" ]]; then
	    help=1
	elif [[ "$filt_arg" == "--debug" ]]; then
	    debug_on
	elif [[ "$filt_arg" == "--release" ]]; then
	    release_on
	elif [[ "$filt_arg" == "--gold" ]]; then
	    use_gold
	elif [[ "$filt_arg" == "--gcc" ]]; then
	    use_gcc $value_arg
	elif [[ "$filt_arg" == "--clang" ]]; then
	    use_clang $value_arg
	elif [[ "$filt_arg" == "--ccache" ]]; then
	    use_ccache
	elif [[ "$filt_arg" == "--ninja" ]]; then
	    use_ninja
	elif [[ "$filt_arg" == "--verbose" ]]; then
	    opt_verbose=1
	elif [[ "$filt_arg" == "distclean" ]]; then
	    tgt_distclean
	    opt_target=1
	elif [[ "$filt_arg" == "eclipse" ]]; then
	    tgt_eclipse
	else
	    args="$args $1"
	fi
	
	shift
done

if [ $help -eq 1 ] 
then
	usage
fi

if [ $opt_verbose -eq 1 ]
then
    cmake_opts="$cmake_opts -DCMAKE_VERBOSE_MAKEFILE=ON"
else
    cmake_opts="$cmake_opts -DCMAKE_VERBOSE_MAKEFILE=OFF"
fi

if [ $opt_configure -eq 1 ]
then
	[ -f /usr/lib/ecmake/configure.cmake ] && config=/usr/lib/ecmake/configure.cmake
	[ -f /usr/local/lib/ecmake/configure.cmake ] && config=/usr/local/lib/ecmake/configure.cmake
	if [ "_${config}" == "_" ]
	then
		echo "configure.cmake not found" >&2
		exit 1 
	fi
	cmake_opts="$cmake_opts -DCMAKE_TOOLCHAIN_FILE=${config}"
fi

if [ $opt_target -eq 0 ]
then
	eval "cmake $args $cmake_opts"
fi